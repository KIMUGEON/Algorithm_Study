import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.StringTokenizer;

public class Main {

	static int N,M,trueN;
	static List<Integer> list;
	static List<Integer>[] party;
	static int[] parent;
	public static void main(String[] args) throws IOException {
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(bf.readLine());
		
		N = Integer.parseInt(st.nextToken()); // 사람 수
		M = Integer.parseInt(st.nextToken()); // 파티 수
		
		parent = new int[N+1];
		for (int i = 1; i <= N; i++) { // 루트 노드 설정
			parent[i] = i;
		}
		
		st = new StringTokenizer(bf.readLine());
		trueN = Integer.parseInt(st.nextToken()); // 진실 아는 사람 수
		list = new ArrayList<Integer>(); // 진실 아는 그룹
		
		if (trueN==0) { // 진실을 아는 사람이 0명인 경우
			System.out.println(M);
		} 
		else {
			for (int i = 0; i < trueN; i++) {
				list.add(Integer.parseInt(st.nextToken())); // list 그룹에 진실 아는 사람 추가
			}
			
			party = new ArrayList[M];
			
			for (int i = 0; i < M; i++) {
				party[i] = new ArrayList<>();
				
				st = new StringTokenizer(bf.readLine());
				
				int entryN = Integer.parseInt(st.nextToken()); // 파티 참석 사람 수
				int men = Integer.parseInt(st.nextToken()); // 참석하는 사람
				
				party[i].add(men);
				
				for (int j = 1; j < entryN; j++) {
					int next = Integer.parseInt(st.nextToken());
					
					union(men, next);
					
					party[i].add(next);
				}
				
			}
			
			int cnt = 0;
			
			for (int i = 0; i < M; i++) {
				for (int j : party[i]) { 
					if (list.contains(find(parent[j]))) { // 해당 파티에  list 그룹 멤버가 있다면
						cnt--;
						break;
					}
				}
				cnt++;
			}
			
			System.out.println(cnt);		
		}
		
	}
		
	public static int find(int n) {
		if (parent[n]==n) 
			return n;
		else 
			return find(parent[n]);
	}
	
	public static void union(int n, int m) {
		int np = find(n);
		int mp = find(m);
		
		if (list.contains(mp))
			parent[np] = mp;
		else
			parent[mp] = np;
	}
}
